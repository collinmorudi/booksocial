package com.collin.booksocial.role;

import com.collin.booksocial.user.User;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDate;
import java.util.List;

/**
 * Represents a role in the system.
 *
 * The Role entity holds information regarding user roles, each identified by a unique name.
 * Roles can be associated with multiple users as part of a many-to-many relationship.
 *
 * Annotations:
 * - @Entity: Specifies that the class is an entity and is mapped to a database table.
 * - @EntityListeners(AuditingEntityListener.class): Specifies the entity listeners for auditing purposes.
 * - @Getter: Generates getter methods for class fields.
 * - @Setter: Generates setter methods for class fields.
 * - @Builder: Provides a builder pattern for creating instances of the Role class.
 * - @AllArgsConstructor: Generates a constructor with all fields as parameters.
 * - @NoArgsConstructor: Generates a no-argument constructor.
 *
 * Fields:
 * - id: Unique identifier for the role, generated by the persistence provider.
 * - name: Unique name of the role, enforced at the database level with a unique constraint.
 * - users: List of users associated with this role. This field is ignored in JSON serialization.
 * - createdDate: Date when the role was created, not updatable.
 * - lastModifiedDate: Date when the role was last modified, not insertable on creation.
 */
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@EntityListeners(AuditingEntityListener.class)
public class Role {

    /**
     * Unique identifier for the role.
     *
     * This field is automatically generated by the persistence provider.
     */
    @Id
    @GeneratedValue
    private Integer id;
    /**
     * The unique name of the role.
     *
     * This field is enforced to be unique at the database level using the @Column annotation with the unique attribute set to true.
     */
    @Column(unique = true)
    private String name;

    /**
     * List of users associated with this role.
     *
     * This field models the many-to-many relationship between roles and users. It is
     * mapped by the "roles" field in the User class. The @JsonIgnore annotation indicates
     * that this field will be ignored during JSON serialization to prevent cyclical references.
     *
     * Annotations:
     * - @ManyToMany(mappedBy = "roles"): Defines the many-to-many relationship, indicating
     *   that the mapping is handled by the "roles" field in the User class.
     * - @JsonIgnore: Prevents this field from being serialized into JSON format.
     */
    @ManyToMany(mappedBy = "roles")
    @JsonIgnore
    private List<User> users;

    /**
     * Represents the date when the role was created.
     *
     * This date is set automatically when the entity is persisted for the first time and
     * cannot be changed later. It is used to keep track of the creation time of the role entity.
     *
     * Annotations:
     * - @CreatedDate: Indicates that the field should be populated with the creation date of the entity.
     * - @Column(nullable = false, updatable = false): Specifies the column properties in the database
     *   to ensure the field is non-null and immutable.
     */
    @CreatedDate
    @Column(nullable = false, updatable = false)
    private LocalDate createdDate;
    /**
     * The date when this role was last modified.
     *
     * This field is automatically updated with the current date whenever the role entity is modified.
     * It is not insertable, meaning its value cannot be set during the creation of a new role entity.
     *
     * Annotations:
     * - @LastModifiedDate: Indicates that the field should be populated with the current date/time when the entity is updated.
     * - @Column(insertable = false): Specifies that this field should not be included in SQL INSERT statements.
     */
    @LastModifiedDate
    @Column(insertable = false)
    private LocalDate lastModifiedDate;
}
